// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MottuChallenge.Infrastructure.Persistence;

#nullable disable

namespace MottuChallenge.Infrastructure.Migrations
{
    [DbContext(typeof(MottuChallengeContext))]
    partial class MottuChallengeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MottuChallenge.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("country");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("neighborhood");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("number");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("street");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("zip_code");

                    b.HasKey("Id");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("MottuChallenge.Domain.Entities.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DestinationSpotId")
                        .HasColumnType("char(36)")
                        .HasColumnName("destination_spot_id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("message");

                    b.Property<Guid>("MotorcycleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("motorcycle_id");

                    b.Property<Guid>("PreviousSpotId")
                        .HasColumnType("char(36)")
                        .HasColumnName("previous_spot_id");

                    b.HasKey("Id");

                    b.HasIndex("DestinationSpotId");

                    b.HasIndex("MotorcycleId");

                    b.HasIndex("PreviousSpotId");

                    b.ToTable("logs", (string)null);
                });

            modelBuilder.Entity("MottuChallenge.Domain.Entities.Motorcycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("EngineType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastRevisionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<Guid>("SpotId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("SpotId")
                        .IsUnique();

                    b.ToTable("Motorcycles", (string)null);
                });

            modelBuilder.Entity("MottuChallenge.Domain.Entities.PolygonPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("PointOrder")
                        .HasColumnType("int")
                        .HasColumnName("point_order");

                    b.Property<Guid?>("SectorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("sector_id");

                    b.Property<double>("X")
                        .HasColumnType("double")
                        .HasColumnName("x");

                    b.Property<double>("Y")
                        .HasColumnType("double")
                        .HasColumnName("y");

                    b.Property<Guid?>("YardId")
                        .HasColumnType("char(36)")
                        .HasColumnName("yard_id");

                    b.HasKey("Id");

                    b.HasIndex("SectorId");

                    b.HasIndex("YardId");

                    b.ToTable("polygon_points", (string)null);
                });

            modelBuilder.Entity("MottuChallenge.Domain.Entities.Sector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("SectorTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("sector_type_id");

                    b.Property<Guid>("YardId")
                        .HasColumnType("char(36)")
                        .HasColumnName("yard_id");

                    b.HasKey("Id");

                    b.HasIndex("SectorTypeId");

                    b.HasIndex("YardId");

                    b.ToTable("sectors", (string)null);
                });

            modelBuilder.Entity("MottuChallenge.Domain.Entities.SectorType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("sector_types", (string)null);
                });

            modelBuilder.Entity("MottuChallenge.Domain.Entities.Spot", b =>
                {
                    b.Property<Guid>("SpotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("spot_id");

                    b.Property<Guid?>("MotorcycleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("motorcycle_id");

                    b.Property<Guid>("SectorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("sector_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<double>("X")
                        .HasColumnType("double")
                        .HasColumnName("x");

                    b.Property<double>("Y")
                        .HasColumnType("double")
                        .HasColumnName("y");

                    b.HasKey("SpotId");

                    b.HasIndex("SectorId");

                    b.ToTable("spots", (string)null);
                });

            modelBuilder.Entity("MottuChallenge.Domain.Entities.Yard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("char(36)")
                        .HasColumnName("address_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("yards", (string)null);
                });

            modelBuilder.Entity("MottuChallenge.Domain.Entities.Log", b =>
                {
                    b.HasOne("MottuChallenge.Domain.Entities.Spot", "DestinationSpot")
                        .WithMany()
                        .HasForeignKey("DestinationSpotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MottuChallenge.Domain.Entities.Motorcycle", "Motorcycle")
                        .WithMany()
                        .HasForeignKey("MotorcycleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MottuChallenge.Domain.Entities.Spot", "PreviousSpot")
                        .WithMany()
                        .HasForeignKey("PreviousSpotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DestinationSpot");

                    b.Navigation("Motorcycle");

                    b.Navigation("PreviousSpot");
                });

            modelBuilder.Entity("MottuChallenge.Domain.Entities.Motorcycle", b =>
                {
                    b.HasOne("MottuChallenge.Domain.Entities.Spot", "Spot")
                        .WithOne("Motorcycle")
                        .HasForeignKey("MottuChallenge.Domain.Entities.Motorcycle", "SpotId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Spot");
                });

            modelBuilder.Entity("MottuChallenge.Domain.Entities.PolygonPoint", b =>
                {
                    b.HasOne("MottuChallenge.Domain.Entities.Sector", "Sector")
                        .WithMany("Points")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MottuChallenge.Domain.Entities.Yard", "Yard")
                        .WithMany("Points")
                        .HasForeignKey("YardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Sector");

                    b.Navigation("Yard");
                });

            modelBuilder.Entity("MottuChallenge.Domain.Entities.Sector", b =>
                {
                    b.HasOne("MottuChallenge.Domain.Entities.SectorType", "SectorType")
                        .WithMany()
                        .HasForeignKey("SectorTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MottuChallenge.Domain.Entities.Yard", "Yard")
                        .WithMany("Sectors")
                        .HasForeignKey("YardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectorType");

                    b.Navigation("Yard");
                });

            modelBuilder.Entity("MottuChallenge.Domain.Entities.Spot", b =>
                {
                    b.HasOne("MottuChallenge.Domain.Entities.Sector", "Sector")
                        .WithMany("Spots")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("MottuChallenge.Domain.Entities.Yard", b =>
                {
                    b.HasOne("MottuChallenge.Domain.Entities.Address", "Address")
                        .WithOne()
                        .HasForeignKey("MottuChallenge.Domain.Entities.Yard", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("MottuChallenge.Domain.Entities.Sector", b =>
                {
                    b.Navigation("Points");

                    b.Navigation("Spots");
                });

            modelBuilder.Entity("MottuChallenge.Domain.Entities.Spot", b =>
                {
                    b.Navigation("Motorcycle");
                });

            modelBuilder.Entity("MottuChallenge.Domain.Entities.Yard", b =>
                {
                    b.Navigation("Points");

                    b.Navigation("Sectors");
                });
#pragma warning restore 612, 618
        }
    }
}
